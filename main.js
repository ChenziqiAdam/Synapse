/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SynapsePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings.ts
var DEFAULT_SETTINGS = {
  ollamaUrl: "http://localhost:11434",
  ollamaModel: "gemma3n:e2b",
  autoLinkEnabled: true,
  summaryLocation: "top",
  flashcardFormat: "simple",
  maxResponseLength: 1e3,
  explanationFolder: "Explanations",
  flashcardFolder: "Flashcards",
  useSummaryYaml: true,
  chatFolder: "Chats",
  enableLiveChat: true,
  enableLiveSuggestions: false,
  suggestionDelay: 1e3
};

// src/ui/SettingsTab.ts
var import_obsidian = require("obsidian");

// src/ollama.ts
var OllamaClient = class {
  constructor(baseUrl, model) {
    this.baseUrl = baseUrl.replace(/\/$/, "");
    this.model = model;
  }
  async isAvailable() {
    try {
      const response = await fetch(`${this.baseUrl}/api/tags`);
      return response.ok;
    } catch (error) {
      return false;
    }
  }
  async generate(prompt, systemPrompt, chatHistory) {
    try {
      let fullPrompt = prompt;
      if (chatHistory && chatHistory.trim()) {
        fullPrompt = `Chat history:
${chatHistory}

Current message: ${prompt}`;
      }
      const requestBody = {
        model: this.model,
        prompt: fullPrompt,
        system: systemPrompt || "",
        stream: false,
        options: {
          temperature: 0.7,
          top_p: 0.9,
          top_k: 40
        }
      };
      const response = await fetch(`${this.baseUrl}/api/generate`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody)
      });
      if (!response.ok) {
        throw new Error(`Ollama API error: ${response.status}`);
      }
      const data = await response.json();
      return data.response.trim();
    } catch (error) {
      throw new Error(`Failed to generate response: ${error.message}`);
    }
  }
  async getAvailableModels() {
    var _a;
    try {
      const response = await fetch(`${this.baseUrl}/api/tags`);
      if (!response.ok) {
        throw new Error(`Failed to fetch models: ${response.status}`);
      }
      const data = await response.json();
      return ((_a = data.models) == null ? void 0 : _a.map((model) => model.name)) || [];
    } catch (error) {
      console.error("Error fetching models:", error);
      return [];
    }
  }
};

// src/ui/SettingsTab.ts
var SynapseSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Synapse Settings" });
    containerEl.createEl("h3", { text: "Ollama Configuration" });
    new import_obsidian.Setting(containerEl).setName("Ollama URL").setDesc("URL where Ollama is running (default: http://localhost:11434)").addText((text) => text.setPlaceholder("http://localhost:11434").setValue(this.plugin.settings.ollamaUrl).onChange(async (value) => {
      this.plugin.settings.ollamaUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Model").setDesc("Ollama model to use (e.g., phi3:mini, llama2, mistral)").addText((text) => text.setPlaceholder("phi3:mini").setValue(this.plugin.settings.ollamaModel).onChange(async (value) => {
      this.plugin.settings.ollamaModel = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Test Connection").setDesc("Test connection to Ollama").addButton((button) => button.setButtonText("Test").setCta().onClick(async () => {
      const client = new OllamaClient(this.plugin.settings.ollamaUrl, this.plugin.settings.ollamaModel);
      const isAvailable = await client.isAvailable();
      if (isAvailable) {
        button.setButtonText("\u2713 Connected");
        button.buttonEl.style.backgroundColor = "#4caf50";
        setTimeout(() => {
          button.setButtonText("Test");
          button.buttonEl.style.backgroundColor = "";
        }, 2e3);
      } else {
        button.setButtonText("\u2717 Failed");
        button.buttonEl.style.backgroundColor = "#f44336";
        setTimeout(() => {
          button.setButtonText("Test");
          button.buttonEl.style.backgroundColor = "";
        }, 2e3);
      }
    }));
    containerEl.createEl("h3", { text: "Feature Settings" });
    new import_obsidian.Setting(containerEl).setName("Auto-linking").setDesc('Automatically create links when using "Explain & Link"').addToggle((toggle) => toggle.setValue(this.plugin.settings.autoLinkEnabled).onChange(async (value) => {
      this.plugin.settings.autoLinkEnabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Summary Location").setDesc("Where to place summaries in notes").addDropdown((dropdown) => dropdown.addOption("top", "Top of note").addOption("bottom", "Bottom of note").setValue(this.plugin.settings.summaryLocation).onChange(async (value) => {
      this.plugin.settings.summaryLocation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Use YAML for Summaries").setDesc("Add summaries to note frontmatter as YAML").addToggle((toggle) => toggle.setValue(this.plugin.settings.useSummaryYaml).onChange(async (value) => {
      this.plugin.settings.useSummaryYaml = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Max Response Length").setDesc("Maximum length for AI responses (characters)").addSlider((slider) => slider.setLimits(500, 3e3, 100).setValue(this.plugin.settings.maxResponseLength).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.maxResponseLength = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Folder Organization" });
    new import_obsidian.Setting(containerEl).setName("Explanations Folder").setDesc("Folder for explanation notes (empty for vault root)").addText((text) => text.setPlaceholder("Explanations").setValue(this.plugin.settings.explanationFolder).onChange(async (value) => {
      this.plugin.settings.explanationFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Flashcards Folder").setDesc("Folder for flashcard notes (empty for vault root)").addText((text) => text.setPlaceholder("Flashcards").setValue(this.plugin.settings.flashcardFolder).onChange(async (value) => {
      this.plugin.settings.flashcardFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Chat Folder").setDesc("Folder for chat session notes (empty for vault root)").addText((text) => text.setPlaceholder("Chats").setValue(this.plugin.settings.chatFolder).onChange(async (value) => {
      this.plugin.settings.chatFolder = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Live Features" });
    new import_obsidian.Setting(containerEl).setName("Enable Live Chat").setDesc("Enable interactive chat sessions in notes").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableLiveChat).onChange(async (value) => {
      this.plugin.settings.enableLiveChat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Enable Live Suggestions").setDesc("Provide suggestions as you type (experimental)").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableLiveSuggestions).onChange(async (value) => {
      this.plugin.settings.enableLiveSuggestions = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Suggestion Delay").setDesc("Delay before showing suggestions (milliseconds)").addSlider((slider) => slider.setLimits(500, 5e3, 100).setValue(this.plugin.settings.suggestionDelay).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.suggestionDelay = value;
      await this.plugin.saveSettings();
    })).setDisabled(!this.plugin.settings.enableLiveSuggestions);
    containerEl.createEl("h3", { text: "Usage Instructions" });
    const instructions = containerEl.createDiv();
    instructions.innerHTML = `
            <p><strong>Commands available:</strong></p>
            <ul>
                <li><strong>Explain & Link:</strong> Select text and use command palette or right-click menu</li>
                <li><strong>Summarize Note:</strong> Run command to summarize entire current note</li>
                <li><strong>Create Flashcards:</strong> Select text to generate study flashcards</li>
                <li><strong>Start Chat Session:</strong> Begin an interactive chat with the AI</li>
                <li><strong>Send Chat Message:</strong> In a chat note, send the current line to the AI</li>
            </ul>
            <p><strong>Requirements:</strong> Make sure Ollama is installed and running with your selected model.</p>
        `;
  }
};

// src/commands.ts
var import_obsidian2 = require("obsidian");
var SynapseCommands = class {
  constructor(app, ollama, settings) {
    this.app = app;
    this.ollama = ollama;
    this.settings = settings;
  }
  updateSettings(settings) {
    this.settings = settings;
    this.ollama = new OllamaClient(settings.ollamaUrl, settings.ollamaModel);
  }
  async explainAndLink(editor, selectedText) {
    if (!selectedText.trim()) {
      new import_obsidian2.Notice("Please select text to explain");
      return;
    }
    const noticeLoading = new import_obsidian2.Notice("Generating explanation...", 0);
    try {
      const systemPrompt = `You are a helpful educational assistant. Create a clear, concise explanation of the given concept. 
            Format your response as a well-structured note with:
            1. A brief definition
            2. Key characteristics or properties
            3. A simple analogy or example if helpful
            4. Why this concept is important
            
            Keep the explanation under ${this.settings.maxResponseLength} characters and use clear, educational language.`;
      const prompt = `Explain this concept: "${selectedText}"`;
      const explanation = await this.ollama.generate(prompt, systemPrompt);
      const noteTitle = this.sanitizeFileName(selectedText);
      await this.ensureFolderExists(this.settings.explanationFolder);
      const filePath = `${this.settings.explanationFolder}/${noteTitle}.md`;
      const existingFile = this.app.vault.getAbstractFileByPath(filePath);
      if (existingFile instanceof import_obsidian2.TFile) {
        new import_obsidian2.Notice(`Note "${noteTitle}" already exists`);
        noticeLoading.hide();
        return;
      }
      const noteContent = `# ${noteTitle}

${explanation}

---
*Generated by Synapse AI*
*Created: ${new Date().toLocaleDateString()}*`;
      const newFile = await this.app.vault.create(filePath, noteContent);
      const link = `[[${filePath.replace(".md", "")}|${noteTitle}]]`;
      editor.replaceSelection(link);
      await this.app.workspace.getLeaf().openFile(newFile);
      noticeLoading.hide();
      new import_obsidian2.Notice(`Created and linked note: ${noteTitle}`);
    } catch (error) {
      noticeLoading.hide();
      new import_obsidian2.Notice(`Error: ${error.message}`);
      console.error("Explain and Link error:", error);
    }
  }
  async summarizeNote(editor, content) {
    var _a, _b;
    if (!content.trim()) {
      new import_obsidian2.Notice("No content to summarize");
      return;
    }
    const noticeLoading = new import_obsidian2.Notice("Generating summary...", 0);
    try {
      const systemPrompt = `You are a helpful assistant that creates concise summaries. 
            Create a bullet-point summary (3-5 points) of the main ideas in the given text. 
            Each bullet point should be clear and capture a key concept.
            Format as markdown bullets starting with "- ".`;
      const prompt = `Summarize this content:

${content}`;
      const summary = await this.ollama.generate(prompt, systemPrompt);
      let summarySection;
      if (this.settings.useSummaryYaml) {
        summarySection = `---
summary:
${summary.split("\n").map((line) => `  ${line}`).join("\n")}
---

`;
      } else {
        summarySection = `## Summary

${summary}

---

`;
      }
      if (this.settings.summaryLocation === "top") {
        const lines = content.split("\n");
        let insertIndex = 0;
        if ((_a = lines[0]) == null ? void 0 : _a.startsWith("---")) {
          let endFrontMatter = lines.findIndex((line, i) => i > 0 && line.startsWith("---"));
          if (endFrontMatter !== -1) {
            insertIndex = endFrontMatter + 1;
          }
        }
        if (this.settings.useSummaryYaml && ((_b = lines[0]) == null ? void 0 : _b.startsWith("---"))) {
          const endFrontMatter = lines.findIndex((line, i) => i > 0 && line.startsWith("---"));
          if (endFrontMatter !== -1) {
            const existingFrontmatter = lines.slice(0, endFrontMatter + 1).join("\n");
            const openFrontmatter = existingFrontmatter.replace(/---\s*$/, "");
            const summaryYaml = `summary:
${summary.split("\n").map((line) => `  ${line}`).join("\n")}
---`;
            const newContent2 = openFrontmatter + summaryYaml + "\n\n" + lines.slice(endFrontMatter + 1).join("\n");
            editor.setValue(newContent2);
            noticeLoading.hide();
            new import_obsidian2.Notice("Summary added to frontmatter");
            return;
          }
        }
        const newContent = [
          ...lines.slice(0, insertIndex),
          "",
          summarySection,
          ...lines.slice(insertIndex)
        ].join("\n");
        editor.setValue(newContent);
      } else {
        editor.setValue(content + "\n\n" + summarySection);
      }
      noticeLoading.hide();
      new import_obsidian2.Notice("Summary added to note");
    } catch (error) {
      noticeLoading.hide();
      new import_obsidian2.Notice(`Error: ${error.message}`);
      console.error("Summarize error:", error);
    }
  }
  async createFlashcards(editor, selectedText) {
    if (!selectedText.trim()) {
      new import_obsidian2.Notice("Please select text to create flashcards from");
      return;
    }
    const noticeLoading = new import_obsidian2.Notice("Creating flashcards...", 0);
    try {
      const systemPrompt = `You are a helpful assistant that creates study flashcards. 
            From the given text, identify 3-7 key concepts and create flashcards in this exact format:

            **Q:** Question here?
            **A:** Answer here

            Make questions clear and specific. Answers should be concise but complete.
            Focus on the most important concepts for learning and retention.`;
      const prompt = `Create flashcards from this content:

${selectedText}`;
      const flashcards = await this.ollama.generate(prompt, systemPrompt);
      const activeFile = this.app.workspace.getActiveFile();
      const noteTitle = activeFile ? activeFile.basename : "Untitled";
      await this.ensureFolderExists(this.settings.flashcardFolder);
      const flashcardFileName = `${this.settings.flashcardFolder}/${noteTitle} - Flashcards.md`;
      const flashcardContent = `# Flashcards for ${noteTitle}

${flashcards}

---
*Generated from: [[${activeFile ? activeFile.path.replace(".md", "") : "Unknown source"}]]*
*Created: ${new Date().toLocaleDateString()}*
`;
      const existingFile = this.app.vault.getAbstractFileByPath(flashcardFileName);
      if (existingFile instanceof import_obsidian2.TFile) {
        const existingContent = await this.app.vault.read(existingFile);
        const newContent = existingContent + "\n\n## New Flashcards\n\n" + flashcards;
        await this.app.vault.modify(existingFile, newContent);
        await this.app.workspace.getLeaf().openFile(existingFile);
        noticeLoading.hide();
        new import_obsidian2.Notice("Added flashcards to existing note");
      } else {
        const newFile = await this.app.vault.create(flashcardFileName, flashcardContent);
        await this.app.workspace.getLeaf().openFile(newFile);
        noticeLoading.hide();
        new import_obsidian2.Notice("Created new flashcards note");
      }
      const link = `

[[${flashcardFileName.replace(".md", "")}|Flashcards for this note]]
`;
      const cursor = editor.getCursor();
      editor.setLine(cursor.line, editor.getLine(cursor.line) + link);
    } catch (error) {
      noticeLoading.hide();
      new import_obsidian2.Notice(`Error: ${error.message}`);
      console.error("Create Flashcards error:", error);
    }
  }
  async startChatSession(editor) {
    await this.ensureFolderExists(this.settings.chatFolder);
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
    const chatFileName = `${this.settings.chatFolder}/Chat-${timestamp}.md`;
    const chatTemplate = `# Chat Session ${new Date().toLocaleString()}

## Context
*This is a chat session with Synapse AI. Type your messages after the > prompt.*

## Chat

> 

`;
    const newFile = await this.app.vault.create(chatFileName, chatTemplate);
    const leaf = this.app.workspace.getLeaf();
    await leaf.openFile(newFile);
    const newEditor = this.getActiveEditor();
    if (newEditor) {
      const lines = chatTemplate.split("\n");
      const promptLine = lines.findIndex((line) => line === "> ");
      if (promptLine !== -1) {
        newEditor.setCursor({ line: promptLine, ch: 2 });
        newEditor.focus();
      }
    }
    new import_obsidian2.Notice("Started new chat session");
  }
  async sendChatMessage(editor) {
    const content = editor.getValue();
    const lines = content.split("\n");
    const currentLine = editor.getCursor().line;
    let promptLine = currentLine;
    while (promptLine >= 0 && !lines[promptLine].startsWith(">")) {
      promptLine--;
    }
    if (promptLine < 0) {
      new import_obsidian2.Notice("No chat prompt found. Please start message with >");
      return;
    }
    const userMessage = lines[promptLine].substring(2).trim();
    if (!userMessage) {
      new import_obsidian2.Notice("Please type a message first");
      return;
    }
    lines[promptLine] = `> ${userMessage}`;
    lines.splice(promptLine + 1, 0, "\n_Synapse is thinking..._");
    editor.setValue(lines.join("\n"));
    const chatHistory = this.extractChatHistory(lines, promptLine);
    try {
      const systemPrompt = `You are a helpful AI assistant in a chat session. 
            Provide thoughtful, concise responses to the user's questions.
            Use markdown formatting when appropriate.
            Reference prior messages in the conversation when relevant.`;
      const response = await this.ollama.generate(userMessage, systemPrompt, chatHistory);
      lines.splice(promptLine + 1, 1);
      lines.splice(
        promptLine + 1,
        0,
        `
${response}
`,
        `> `
      );
      editor.setValue(lines.join("\n"));
      editor.setCursor({ line: promptLine + 3, ch: 2 });
      editor.focus();
    } catch (error) {
      new import_obsidian2.Notice(`Error: ${error.message}`);
      console.error("Chat error:", error);
      lines.splice(promptLine + 1, 1);
      lines.splice(promptLine + 1, 0, "_Error: Could not generate response_");
      editor.setValue(lines.join("\n"));
    }
  }
  async generateLiveSuggestion(editor) {
    if (!this.settings.enableLiveSuggestions)
      return;
    const content = editor.getValue();
    const cursor = editor.getCursor();
    const currentLine = cursor.line;
    const contextLines = content.split("\n").slice(Math.max(0, currentLine - 10), currentLine + 1);
    const context = contextLines.join("\n");
    if (context.trim().length < 10)
      return;
    try {
      const systemPrompt = `You are an AI writing assistant. 
            Based on the context provided, suggest a brief continuation (1-2 sentences max).
            Make your suggestion directly relevant to what's being written.
            Do not repeat what's already written.`;
      const response = await this.ollama.generate(`Continue this text: ${context}`, systemPrompt);
      new import_obsidian2.Notice(`Suggestion: ${response.substring(0, 100)}${response.length > 100 ? "..." : ""}`, 5e3);
    } catch (error) {
      console.error("Suggestion error:", error);
    }
  }
  sanitizeFileName(text) {
    return text.replace(/[^\w\s-]/g, "").replace(/\s+/g, " ").trim().substring(0, 50);
  }
  async ensureFolderExists(folderPath) {
    if (!folderPath)
      return;
    const folders = folderPath.split("/").filter((p) => p.trim());
    let currentPath = "";
    for (const folder of folders) {
      currentPath = currentPath ? `${currentPath}/${folder}` : folder;
      if (!this.app.vault.getAbstractFileByPath(currentPath)) {
        try {
          await this.app.vault.createFolder(currentPath);
        } catch (error) {
          console.error(`Failed to create folder ${currentPath}:`, error);
        }
      }
    }
  }
  getActiveEditor() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    return (view == null ? void 0 : view.editor) || null;
  }
  extractChatHistory(lines, currentPromptLine) {
    let chatHistory = "";
    let inChat = false;
    for (let i = 0; i < currentPromptLine; i++) {
      const line = lines[i];
      if (line === "## Chat") {
        inChat = true;
        continue;
      }
      if (inChat) {
        if (line.startsWith("> ")) {
          chatHistory += `User: ${line.substring(2)}
`;
        } else if (line.trim() && !line.startsWith("_") && line !== "") {
          chatHistory += `AI: ${line}
`;
        }
      }
    }
    return chatHistory;
  }
};

// src/main.ts
var SynapsePlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.ollama = new OllamaClient(this.settings.ollamaUrl, this.settings.ollamaModel);
    this.commands = new SynapseCommands(this.app, this.ollama, this.settings);
    this.debouncedSuggestion = (0, import_obsidian3.debounce)(
      (editor) => this.commands.generateLiveSuggestion(editor),
      this.settings.suggestionDelay
    );
    this.addSettingTab(new SynapseSettingsTab(this.app, this));
    this.addCommand({
      id: "explain-and-link",
      name: "Explain & Link Selected Text",
      editorCallback: (editor) => {
        const selectedText = editor.getSelection();
        this.commands.explainAndLink(editor, selectedText);
      }
    });
    this.addCommand({
      id: "summarize-note",
      name: "Summarize Current Note",
      editorCallback: (editor) => {
        const content = editor.getValue();
        this.commands.summarizeNote(editor, content);
      }
    });
    this.addCommand({
      id: "create-flashcards",
      name: "Create Flashcards from Selection",
      editorCallback: (editor) => {
        const selectedText = editor.getSelection();
        this.commands.createFlashcards(editor, selectedText);
      }
    });
    this.addCommand({
      id: "start-chat",
      name: "Start New Chat Session",
      editorCallback: (editor) => {
        this.commands.startChatSession(editor);
      }
    });
    this.addCommand({
      id: "send-chat-message",
      name: "Send Chat Message",
      editorCallback: (editor) => {
        this.commands.sendChatMessage(editor);
      }
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        var _a;
        const selectedText = editor.getSelection();
        if (selectedText) {
          menu.addItem((item) => {
            item.setTitle("\u{1F9E0} Explain & Link").setIcon("brain-circuit").onClick(async () => {
              await this.commands.explainAndLink(editor, selectedText);
            });
          });
          menu.addItem((item) => {
            item.setTitle("\u{1F3B4} Create Flashcards").setIcon("card-stack").onClick(async () => {
              await this.commands.createFlashcards(editor, selectedText);
            });
          });
        }
        menu.addItem((item) => {
          item.setTitle("\u{1F4DD} Summarize Note").setIcon("list-checks").onClick(async () => {
            const content = editor.getValue();
            await this.commands.summarizeNote(editor, content);
          });
        });
        const fileName = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.basename) || "";
        if (fileName.startsWith("Chat-")) {
          menu.addItem((item) => {
            item.setTitle("\u{1F4AC} Send Chat Message").setIcon("message-square").onClick(async () => {
              await this.commands.sendChatMessage(editor);
            });
          });
        } else {
          menu.addItem((item) => {
            item.setTitle("\u{1F4AC} Start Chat Session").setIcon("message-circle").onClick(async () => {
              await this.commands.startChatSession(editor);
            });
          });
        }
      })
    );
    if (this.settings.enableLiveSuggestions) {
      this.registerEvent(
        this.app.workspace.on("editor-change", (editor) => {
          this.debouncedSuggestion(editor);
        })
      );
    }
    this.checkOllamaConnection();
    console.log("Synapse plugin loaded");
  }
  onunload() {
    console.log("Synapse plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.commands.updateSettings(this.settings);
    this.debouncedSuggestion = (0, import_obsidian3.debounce)(
      (editor) => this.commands.generateLiveSuggestion(editor),
      this.settings.suggestionDelay
    );
    if (this.settings.enableLiveSuggestions) {
      this.registerEvent(
        this.app.workspace.on("editor-change", (editor) => {
          this.debouncedSuggestion(editor);
        })
      );
    }
  }
  async checkOllamaConnection() {
    const isAvailable = await this.ollama.isAvailable();
    if (!isAvailable) {
      new import_obsidian3.Notice(
        "Synapse: Cannot connect to Ollama. Please make sure Ollama is running on " + this.settings.ollamaUrl,
        8e3
      );
    } else {
      new import_obsidian3.Notice("Synapse: Connected to Ollama successfully", 3e3);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
