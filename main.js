/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SynapsePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings.ts
var DEFAULT_SETTINGS = {
  ollamaUrl: "http://localhost:11434",
  ollamaModel: "gemma3n:e2b",
  autoLinkEnabled: true,
  summaryLocation: "top",
  flashcardFormat: "simple",
  maxResponseLength: 1e3,
  explanationFolder: "Explanations",
  flashcardFolder: "Flashcards",
  useSummaryYaml: true,
  chatFolder: "Chats",
  enableLiveChat: true,
  enableLiveSuggestions: false,
  suggestionDelay: 3e3,
  // Simplified settings with defaults
  showGhostText: true,
  allowQuickAccept: true,
  // New default settings
  templatePath: "",
  useTemplateForExplanations: false,
  globalSystemPrompt: "You are a helpful educational assistant providing concise, accurate information.",
  chatSystemPrompt: "You are a helpful AI assistant in a chat session. Provide thoughtful, concise responses to the user's questions. Use markdown formatting when appropriate. Reference prior messages in the conversation when relevant.",
  explanationSystemPrompt: "You are a helpful educational assistant. Create a clear, concise explanation of the given concept. Format your response as a well-structured note with:\n1. A brief definition\n2. Key characteristics or properties\n3. A simple analogy or example if helpful\n4. Why this concept is important\n\nKeep the explanation under {{maxResponseLength}} characters and use clear, educational language.",
  summarySystemPrompt: 'You are a helpful assistant that creates concise summaries. Create a bullet-point summary (3-5 points) of the main ideas in the given text. Each bullet point should be clear and capture a key concept. Format as markdown bullets starting with "- ".',
  flashcardSystemPrompt: "You are a helpful assistant that creates study flashcards. From the given text, identify 3-7 key concepts and create flashcards in this exact format:\n\n**Q:** Question here?\n**A:** Answer here\n\nMake questions clear and specific. Answers should be concise but complete. Focus on the most important concepts for learning and retention.",
  customTemplateVariables: {}
};

// src/ui/SettingsTab.ts
var import_obsidian = require("obsidian");

// src/ollama.ts
var OllamaClient = class {
  constructor(baseUrl, model) {
    this.baseUrl = baseUrl.replace(/\/$/, "");
    this.model = model;
  }
  async isAvailable() {
    try {
      const response = await fetch(`${this.baseUrl}/api/tags`);
      return response.ok;
    } catch (error) {
      return false;
    }
  }
  async generate(prompt, systemPrompt, chatHistory) {
    try {
      let fullPrompt = prompt;
      if (chatHistory && chatHistory.trim()) {
        fullPrompt = `Chat history:
${chatHistory}

Current message: ${prompt}`;
      }
      const requestBody = {
        model: this.model,
        prompt: fullPrompt,
        system: systemPrompt || "",
        stream: false,
        options: {
          temperature: 0.7,
          top_p: 0.9,
          top_k: 40
        }
      };
      const response = await fetch(`${this.baseUrl}/api/generate`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody)
      });
      if (!response.ok) {
        throw new Error(`Ollama API error: ${response.status}`);
      }
      const data = await response.json();
      return data.response.trim();
    } catch (error) {
      throw new Error(`Failed to generate response: ${error.message}`);
    }
  }
  async getAvailableModels() {
    var _a;
    try {
      const response = await fetch(`${this.baseUrl}/api/tags`);
      if (!response.ok) {
        throw new Error(`Failed to fetch models: ${response.status}`);
      }
      const data = await response.json();
      return ((_a = data.models) == null ? void 0 : _a.map((model) => model.name)) || [];
    } catch (error) {
      console.error("Error fetching models:", error);
      return [];
    }
  }
};

// src/ui/SettingsTab.ts
var SynapseSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("synapse-settings");
    const tabContainer = containerEl.createDiv("synapse-settings-tabs");
    const tabContent = containerEl.createDiv("synapse-settings-content");
    const generalTab = tabContainer.createDiv("synapse-tab");
    generalTab.setText("General");
    generalTab.addClass("active");
    const promptsTab = tabContainer.createDiv("synapse-tab");
    promptsTab.setText("AI Prompts");
    const templatesTab = tabContainer.createDiv("synapse-tab");
    templatesTab.setText("Templates");
    const advancedTab = tabContainer.createDiv("synapse-tab");
    advancedTab.setText("Advanced");
    const generalContent = tabContent.createDiv("synapse-tab-content");
    generalContent.addClass("active");
    const promptsContent = tabContent.createDiv("synapse-tab-content");
    promptsContent.style.display = "none";
    const templatesContent = tabContent.createDiv("synapse-tab-content");
    templatesContent.style.display = "none";
    const advancedContent = tabContent.createDiv("synapse-tab-content");
    advancedContent.style.display = "none";
    const tabs = [generalTab, promptsTab, templatesTab, advancedTab];
    const contents = [generalContent, promptsContent, templatesContent, advancedContent];
    tabs.forEach((tab, index) => {
      tab.addEventListener("click", () => {
        tabs.forEach((t) => t.removeClass("active"));
        contents.forEach((c) => c.style.display = "none");
        tab.addClass("active");
        contents[index].style.display = "block";
      });
    });
    generalContent.createEl("h2", { text: "Synapse Settings" });
    generalContent.createEl("h3", { text: "Ollama Configuration" });
    new import_obsidian.Setting(generalContent).setName("Ollama URL").setDesc("URL where Ollama is running (default: http://localhost:11434)").addText((text) => text.setPlaceholder("http://localhost:11434").setValue(this.plugin.settings.ollamaUrl).onChange(async (value) => {
      this.plugin.settings.ollamaUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(generalContent).setName("Model").setDesc("Ollama model to use (e.g., phi3:mini, llama2, mistral)").addText((text) => text.setPlaceholder("phi3:mini").setValue(this.plugin.settings.ollamaModel).onChange(async (value) => {
      this.plugin.settings.ollamaModel = value;
      await this.plugin.saveSettings();
    }));
    const modelContainer = generalContent.createDiv("synapse-model-selector");
    const modelSetting = new import_obsidian.Setting(modelContainer).setName("Select Available Model").setDesc("Choose from models available in your Ollama installation");
    let modelDropdown;
    modelSetting.addDropdown((dropdown) => {
      modelDropdown = dropdown;
      dropdown.addOption("", "Loading models...");
      dropdown.setValue("");
      dropdown.onChange(async (value) => {
        if (value) {
          this.plugin.settings.ollamaModel = value;
          await this.plugin.saveSettings();
        }
      });
    });
    this.loadAvailableModels(modelDropdown);
    new import_obsidian.Setting(generalContent).setName("Test Connection").setDesc("Test connection to Ollama").addButton((button) => {
      button.setButtonText("Test");
      button.setCta();
      button.buttonEl.addClass("synapse-test-button");
      button.onClick(async () => {
        const client = new OllamaClient(this.plugin.settings.ollamaUrl, this.plugin.settings.ollamaModel);
        const isAvailable = await client.isAvailable();
        if (isAvailable) {
          button.setButtonText("\u2713 Connected");
          button.buttonEl.style.backgroundColor = "#4caf50";
          setTimeout(() => {
            button.setButtonText("Test");
            button.buttonEl.style.backgroundColor = "";
          }, 2e3);
        } else {
          button.setButtonText("\u2717 Failed");
          button.buttonEl.style.backgroundColor = "#f44336";
          setTimeout(() => {
            button.setButtonText("Test");
            button.buttonEl.style.backgroundColor = "";
          }, 2e3);
        }
      });
    });
    generalContent.createEl("h3", { text: "Feature Settings" });
    new import_obsidian.Setting(generalContent).setName("Auto-linking").setDesc('Automatically create links when using "Explain & Link"').addToggle((toggle) => toggle.setValue(this.plugin.settings.autoLinkEnabled).onChange(async (value) => {
      this.plugin.settings.autoLinkEnabled = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(generalContent).setName("Summary Location").setDesc("Where to place summaries in notes").addDropdown((dropdown) => dropdown.addOption("top", "Top of note").addOption("bottom", "Bottom of note").setValue(this.plugin.settings.summaryLocation).onChange(async (value) => {
      this.plugin.settings.summaryLocation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(generalContent).setName("Use YAML for Summaries").setDesc("Add summaries to note frontmatter as YAML").addToggle((toggle) => toggle.setValue(this.plugin.settings.useSummaryYaml).onChange(async (value) => {
      this.plugin.settings.useSummaryYaml = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(generalContent).setName("Max Response Length").setDesc("Maximum length for AI responses (characters)").addSlider((slider) => slider.setLimits(500, 3e3, 100).setValue(this.plugin.settings.maxResponseLength).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.maxResponseLength = value;
      await this.plugin.saveSettings();
    }));
    generalContent.createEl("h3", { text: "Folder Organization" });
    new import_obsidian.Setting(generalContent).setName("Explanations Folder").setDesc("Folder for explanation notes (empty for vault root)").addText((text) => text.setPlaceholder("Explanations").setValue(this.plugin.settings.explanationFolder).onChange(async (value) => {
      this.plugin.settings.explanationFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(generalContent).setName("Flashcards Folder").setDesc("Folder for flashcard notes (empty for vault root)").addText((text) => text.setPlaceholder("Flashcards").setValue(this.plugin.settings.flashcardFolder).onChange(async (value) => {
      this.plugin.settings.flashcardFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(generalContent).setName("Chat Folder").setDesc("Folder for chat session notes (empty for vault root)").addText((text) => text.setPlaceholder("Chats").setValue(this.plugin.settings.chatFolder).onChange(async (value) => {
      this.plugin.settings.chatFolder = value;
      await this.plugin.saveSettings();
    }));
    promptsContent.createEl("h2", { text: "AI Prompts Configuration" });
    promptsContent.createEl("p", {
      text: "Customize the system prompts used for different features. You can use variables like {{maxResponseLength}}, {{date}}, and {{model}}."
    });
    promptsContent.createEl("h3", { text: "Global System Prompt" });
    const globalPromptSetting = new import_obsidian.Setting(promptsContent).setName("Global System Prompt").setDesc("Default system prompt used when no specific prompt is provided");
    let globalPromptArea;
    globalPromptSetting.addTextArea((textarea) => {
      globalPromptArea = textarea;
      textarea.setValue(this.plugin.settings.globalSystemPrompt).setPlaceholder("You are a helpful assistant...").onChange(async (value) => {
        this.plugin.settings.globalSystemPrompt = value;
        await this.plugin.saveSettings();
      });
      textarea.inputEl.rows = 4;
      textarea.inputEl.cols = 50;
    });
    promptsContent.createEl("h3", { text: "Explanation Prompt" });
    const explanationPromptSetting = new import_obsidian.Setting(promptsContent).setName("Explanation System Prompt").setDesc("System prompt used for generating explanations");
    let explanationPromptArea;
    explanationPromptSetting.addTextArea((textarea) => {
      explanationPromptArea = textarea;
      textarea.setValue(this.plugin.settings.explanationSystemPrompt).setPlaceholder("Create a clear, concise explanation...").onChange(async (value) => {
        this.plugin.settings.explanationSystemPrompt = value;
        await this.plugin.saveSettings();
      });
      textarea.inputEl.rows = 6;
      textarea.inputEl.cols = 50;
    });
    promptsContent.createEl("h3", { text: "Summary Prompt" });
    const summaryPromptSetting = new import_obsidian.Setting(promptsContent).setName("Summary System Prompt").setDesc("System prompt used for generating summaries");
    let summaryPromptArea;
    summaryPromptSetting.addTextArea((textarea) => {
      summaryPromptArea = textarea;
      textarea.setValue(this.plugin.settings.summarySystemPrompt).setPlaceholder("Create a bullet-point summary...").onChange(async (value) => {
        this.plugin.settings.summarySystemPrompt = value;
        await this.plugin.saveSettings();
      });
      textarea.inputEl.rows = 4;
      textarea.inputEl.cols = 50;
    });
    promptsContent.createEl("h3", { text: "Flashcard Prompt" });
    const flashcardPromptSetting = new import_obsidian.Setting(promptsContent).setName("Flashcard System Prompt").setDesc("System prompt used for generating flashcards");
    let flashcardPromptArea;
    flashcardPromptSetting.addTextArea((textarea) => {
      flashcardPromptArea = textarea;
      textarea.setValue(this.plugin.settings.flashcardSystemPrompt).setPlaceholder("Create flashcards in this format...").onChange(async (value) => {
        this.plugin.settings.flashcardSystemPrompt = value;
        await this.plugin.saveSettings();
      });
      textarea.inputEl.rows = 6;
      textarea.inputEl.cols = 50;
    });
    promptsContent.createEl("h3", { text: "Chat Prompt" });
    const chatPromptSetting = new import_obsidian.Setting(promptsContent).setName("Chat System Prompt").setDesc("System prompt used for chat sessions");
    let chatPromptArea;
    chatPromptSetting.addTextArea((textarea) => {
      chatPromptArea = textarea;
      textarea.setValue(this.plugin.settings.chatSystemPrompt).setPlaceholder("You are a helpful AI assistant...").onChange(async (value) => {
        this.plugin.settings.chatSystemPrompt = value;
        await this.plugin.saveSettings();
      });
      textarea.inputEl.rows = 4;
      textarea.inputEl.cols = 50;
    });
    new import_obsidian.Setting(promptsContent).setName("Reset Prompts").setDesc("Reset all prompts to default values").addButton((button) => {
      button.setButtonText("Reset to Defaults");
      button.onClick(async () => {
        if (confirm("Are you sure you want to reset all prompts to default values?")) {
          this.plugin.settings.globalSystemPrompt = this.plugin.DEFAULT_SETTINGS.globalSystemPrompt;
          this.plugin.settings.explanationSystemPrompt = this.plugin.DEFAULT_SETTINGS.explanationSystemPrompt;
          this.plugin.settings.summarySystemPrompt = this.plugin.DEFAULT_SETTINGS.summarySystemPrompt;
          this.plugin.settings.flashcardSystemPrompt = this.plugin.DEFAULT_SETTINGS.flashcardSystemPrompt;
          this.plugin.settings.chatSystemPrompt = this.plugin.DEFAULT_SETTINGS.chatSystemPrompt;
          globalPromptArea.setValue(this.plugin.settings.globalSystemPrompt);
          explanationPromptArea.setValue(this.plugin.settings.explanationSystemPrompt);
          summaryPromptArea.setValue(this.plugin.settings.summarySystemPrompt);
          flashcardPromptArea.setValue(this.plugin.settings.flashcardSystemPrompt);
          chatPromptArea.setValue(this.plugin.settings.chatSystemPrompt);
          await this.plugin.saveSettings();
          new Notice("All prompts reset to defaults");
        }
      });
    });
    templatesContent.createEl("h2", { text: "Templates Configuration" });
    templatesContent.createEl("p", {
      text: "Configure templates for generated notes. Templates support variables like {{title}}, {{content}}, {{date}}, and custom variables."
    });
    new import_obsidian.Setting(templatesContent).setName("Template File").setDesc("Select a template file for explanation notes").addText((text) => text.setPlaceholder("path/to/template.md").setValue(this.plugin.settings.templatePath).onChange(async (value) => {
      this.plugin.settings.templatePath = value;
      await this.plugin.saveSettings();
    })).addButton((button) => {
      button.setButtonText("Browse");
      button.onClick(async () => {
        const modal = this.createFileSelectionModal((file) => {
          var _a;
          if (file) {
            this.plugin.settings.templatePath = file.path;
            const textInput = (_a = button.buttonEl.parentElement) == null ? void 0 : _a.querySelector("input");
            if (textInput) {
              textInput.value = file.path;
            }
            this.plugin.saveSettings();
          }
        });
        modal.open();
      });
    });
    new import_obsidian.Setting(templatesContent).setName("Use Template for Explanations").setDesc("Use the selected template file for explanation notes").addToggle((toggle) => toggle.setValue(this.plugin.settings.useTemplateForExplanations).onChange(async (value) => {
      this.plugin.settings.useTemplateForExplanations = value;
      await this.plugin.saveSettings();
    }));
    templatesContent.createEl("h3", { text: "Template Variables" });
    templatesContent.createEl("p", {
      text: "Built-in variables: {{title}} - note title, {{content}} - AI generated content, {{date}} - current date, {{query}} - original selected text"
    });
    templatesContent.createEl("h3", { text: "Custom Template Variables" });
    const customVarsContainer = templatesContent.createDiv("synapse-custom-vars");
    const refreshCustomVariables = () => {
      customVarsContainer.empty();
      for (const [key, value] of Object.entries(this.plugin.settings.customTemplateVariables)) {
        this.addCustomVariableRow(customVarsContainer, key, value);
      }
      const addVarButton = customVarsContainer.createEl("button", {
        text: "Add Custom Variable",
        cls: "synapse-add-var-button"
      });
      addVarButton.addEventListener("click", () => {
        const newKey = `variable${Object.keys(this.plugin.settings.customTemplateVariables).length + 1}`;
        this.plugin.settings.customTemplateVariables[newKey] = "";
        this.plugin.saveSettings();
        refreshCustomVariables();
      });
    };
    refreshCustomVariables();
    advancedContent.createEl("h2", { text: "Advanced Settings" });
    advancedContent.createEl("h3", { text: "Live Features" });
    new import_obsidian.Setting(advancedContent).setName("Enable Live Chat").setDesc("Enable interactive chat sessions in notes").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableLiveChat).onChange(async (value) => {
      this.plugin.settings.enableLiveChat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(advancedContent).setName("Enable Live Suggestions").setDesc("Provide suggestions as you type (experimental)").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableLiveSuggestions).onChange(async (value) => {
      this.plugin.settings.enableLiveSuggestions = value;
      await this.plugin.saveSettings();
      this.updateLiveFeatureSettingsVisibility();
    }));
    const liveSuggestionsContainer = advancedContent.createDiv("synapse-live-settings");
    new import_obsidian.Setting(liveSuggestionsContainer).setName("Show Ghost Text").setDesc("Show suggested text completions as you type").addToggle((toggle) => toggle.setValue(this.plugin.settings.showGhostText).onChange(async (value) => {
      this.plugin.settings.showGhostText = value;
      await this.plugin.saveSettings();
    })).setDisabled(!this.plugin.settings.enableLiveSuggestions);
    new import_obsidian.Setting(liveSuggestionsContainer).setName("Allow Quick Accept").setDesc("Show accept button for suggestions").addToggle((toggle) => toggle.setValue(this.plugin.settings.allowQuickAccept).onChange(async (value) => {
      this.plugin.settings.allowQuickAccept = value;
      await this.plugin.saveSettings();
    })).setDisabled(!this.plugin.settings.enableLiveSuggestions);
    new import_obsidian.Setting(liveSuggestionsContainer).setName("Suggestion Delay").setDesc("Delay before showing suggestions (milliseconds)").addSlider((slider) => slider.setLimits(500, 5e3, 100).setValue(this.plugin.settings.suggestionDelay).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.suggestionDelay = value;
      await this.plugin.saveSettings();
    })).setDisabled(!this.plugin.settings.enableLiveSuggestions);
    this.updateLiveFeatureSettingsVisibility();
  }
  updateLiveFeatureSettingsVisibility() {
    const liveSettingsDiv = this.containerEl.querySelector(".synapse-live-settings");
    if (liveSettingsDiv) {
      liveSettingsDiv.style.display = this.plugin.settings.enableLiveSuggestions ? "block" : "none";
    }
  }
  async loadAvailableModels(dropdown) {
    try {
      dropdown.selectEl.empty();
      dropdown.addOption("", "Loading models...");
      const client = new OllamaClient(this.plugin.settings.ollamaUrl, "");
      const models = await client.getAvailableModels();
      dropdown.selectEl.empty();
      if (models.length === 0) {
        dropdown.addOption("", "No models found");
      } else {
        models.forEach((model) => {
          dropdown.addOption(model, model);
        });
        if (models.includes(this.plugin.settings.ollamaModel)) {
          dropdown.setValue(this.plugin.settings.ollamaModel);
        }
      }
    } catch (error) {
      console.error("Error loading models:", error);
      dropdown.selectEl.empty();
      dropdown.addOption("", "Error loading models");
    }
  }
  addCustomVariableRow(container, key, value) {
    const row = container.createDiv("synapse-custom-var-row");
    const keyInput = row.createEl("input", {
      type: "text",
      value: key,
      placeholder: "Variable name"
    });
    const valueInput = row.createEl("input", {
      type: "text",
      value,
      placeholder: "Value"
    });
    const deleteButton = row.createEl("button", {
      text: "\u2715",
      cls: "synapse-delete-var-button"
    });
    keyInput.addEventListener("change", () => {
      delete this.plugin.settings.customTemplateVariables[key];
      this.plugin.settings.customTemplateVariables[keyInput.value] = valueInput.value;
      this.plugin.saveSettings();
    });
    valueInput.addEventListener("change", () => {
      this.plugin.settings.customTemplateVariables[key] = valueInput.value;
      this.plugin.saveSettings();
    });
    deleteButton.addEventListener("click", () => {
      delete this.plugin.settings.customTemplateVariables[key];
      this.plugin.saveSettings();
      row.remove();
    });
  }
  createFileSelectionModal(callback) {
    const { modal, contentEl } = this.createModal("Select Template File");
    const searchEl = contentEl.createEl("input", {
      type: "text",
      placeholder: "Search files..."
    });
    const fileListEl = contentEl.createDiv("synapse-file-list");
    const markdownFiles = this.app.vault.getMarkdownFiles();
    const displayFiles = (files) => {
      fileListEl.empty();
      if (files.length === 0) {
        fileListEl.createEl("div", { text: "No files found" });
        return;
      }
      for (const file of files) {
        const fileItem = fileListEl.createDiv("synapse-file-item");
        fileItem.setText(file.path);
        fileItem.addEventListener("click", () => {
          callback(file);
          modal.close();
        });
      }
    };
    displayFiles(markdownFiles);
    searchEl.addEventListener("input", () => {
      const searchTerm = searchEl.value.toLowerCase();
      const filteredFiles = markdownFiles.filter(
        (file) => file.path.toLowerCase().includes(searchTerm)
      );
      displayFiles(filteredFiles);
    });
    const footerEl = contentEl.createDiv("synapse-modal-footer");
    const cancelButton = footerEl.createEl("button", { text: "Cancel" });
    cancelButton.addEventListener("click", () => {
      callback(null);
      modal.close();
    });
    return modal;
  }
  createModal(title) {
    const modal = new (require("obsidian")).Modal(this.app);
    modal.titleEl.setText(title);
    modal.contentEl.addClass("synapse-modal");
    return { modal, contentEl: modal.contentEl };
  }
};

// src/commands.ts
var import_obsidian2 = require("obsidian");
var SynapseCommands = class {
  constructor(app, ollama, settings) {
    this.app = app;
    this.ollama = ollama;
    this.settings = settings;
  }
  updateSettings(settings) {
    this.settings = settings;
    this.ollama = new OllamaClient(settings.ollamaUrl, settings.ollamaModel);
  }
  async explainAndLink(editor, selectedText) {
    if (!selectedText.trim()) {
      new import_obsidian2.Notice("Please select text to explain");
      return;
    }
    const noticeLoading = new import_obsidian2.Notice("Generating explanation...", 0);
    try {
      const systemPrompt = this.processTemplateVariables(this.settings.explanationSystemPrompt);
      const prompt = `Explain this concept: "${selectedText}"`;
      const explanation = await this.ollama.generate(prompt, systemPrompt);
      const noteTitle = this.sanitizeFileName(selectedText);
      await this.ensureFolderExists(this.settings.explanationFolder);
      const filePath = `${this.settings.explanationFolder}/${noteTitle}.md`;
      const existingFile = this.app.vault.getAbstractFileByPath(filePath);
      if (existingFile instanceof import_obsidian2.TFile) {
        new import_obsidian2.Notice(`Note "${noteTitle}" already exists`);
        noticeLoading.hide();
        return;
      }
      let noteContent;
      if (this.settings.useTemplateForExplanations && this.settings.templatePath) {
        noteContent = await this.generateFromTemplate(
          this.settings.templatePath,
          {
            title: noteTitle,
            content: explanation,
            date: new Date().toLocaleDateString(),
            query: selectedText,
            ...this.settings.customTemplateVariables
          }
        );
      } else {
        noteContent = `# ${noteTitle}

${explanation}

---
*Generated by Synapse AI*
*Created: ${new Date().toLocaleDateString()}*`;
      }
      const newFile = await this.app.vault.create(filePath, noteContent);
      const link = `[[${filePath.replace(".md", "")}|${noteTitle}]]`;
      editor.replaceSelection(link);
      await this.app.workspace.getLeaf().openFile(newFile);
      noticeLoading.hide();
      new import_obsidian2.Notice(`Created and linked note: ${noteTitle}`);
    } catch (error) {
      noticeLoading.hide();
      new import_obsidian2.Notice(`Error: ${error.message}`);
      console.error("Explain and Link error:", error);
    }
  }
  async summarizeNote(editor, content) {
    var _a, _b;
    if (!content.trim()) {
      new import_obsidian2.Notice("No content to summarize");
      return;
    }
    const noticeLoading = new import_obsidian2.Notice("Generating summary...", 0);
    try {
      const systemPrompt = this.processTemplateVariables(this.settings.summarySystemPrompt);
      const prompt = `Summarize this content:

${content}`;
      const summary = await this.ollama.generate(prompt, systemPrompt);
      let summarySection;
      if (this.settings.useSummaryYaml) {
        summarySection = `---
summary:
${summary.split("\n").map((line) => `  ${line}`).join("\n")}
---

`;
      } else {
        summarySection = `## Summary

${summary}

---

`;
      }
      if (this.settings.summaryLocation === "top") {
        const lines = content.split("\n");
        let insertIndex = 0;
        if ((_a = lines[0]) == null ? void 0 : _a.startsWith("---")) {
          let endFrontMatter = lines.findIndex((line, i) => i > 0 && line.startsWith("---"));
          if (endFrontMatter !== -1) {
            insertIndex = endFrontMatter + 1;
          }
        }
        if (this.settings.useSummaryYaml && ((_b = lines[0]) == null ? void 0 : _b.startsWith("---"))) {
          const endFrontMatter = lines.findIndex((line, i) => i > 0 && line.startsWith("---"));
          if (endFrontMatter !== -1) {
            const existingFrontmatter = lines.slice(0, endFrontMatter + 1).join("\n");
            const openFrontmatter = existingFrontmatter.replace(/---\s*$/, "");
            const summaryYaml = `summary:
${summary.split("\n").map((line) => `  ${line}`).join("\n")}
---`;
            const newContent2 = openFrontmatter + summaryYaml + "\n\n" + lines.slice(endFrontMatter + 1).join("\n");
            editor.setValue(newContent2);
            noticeLoading.hide();
            new import_obsidian2.Notice("Summary added to frontmatter");
            return;
          }
        }
        const newContent = [
          ...lines.slice(0, insertIndex),
          "",
          summarySection,
          ...lines.slice(insertIndex)
        ].join("\n");
        editor.setValue(newContent);
      } else {
        editor.setValue(content + "\n\n" + summarySection);
      }
      noticeLoading.hide();
      new import_obsidian2.Notice("Summary added to note");
    } catch (error) {
      noticeLoading.hide();
      new import_obsidian2.Notice(`Error: ${error.message}`);
      console.error("Summarize error:", error);
    }
  }
  async createFlashcards(editor, selectedText) {
    if (!selectedText.trim()) {
      new import_obsidian2.Notice("Please select text to create flashcards from");
      return;
    }
    const noticeLoading = new import_obsidian2.Notice("Creating flashcards...", 0);
    try {
      const systemPrompt = this.processTemplateVariables(this.settings.flashcardSystemPrompt);
      const prompt = `Create flashcards from this content:

${selectedText}`;
      const flashcards = await this.ollama.generate(prompt, systemPrompt);
      const activeFile = this.app.workspace.getActiveFile();
      const noteTitle = activeFile ? activeFile.basename : "Untitled";
      await this.ensureFolderExists(this.settings.flashcardFolder);
      const flashcardFileName = `${this.settings.flashcardFolder}/${noteTitle} - Flashcards.md`;
      const flashcardContent = `# Flashcards for ${noteTitle}

${flashcards}

---
*Generated from: [[${activeFile ? activeFile.path.replace(".md", "") : "Unknown source"}]]*
*Created: ${new Date().toLocaleDateString()}*
`;
      const existingFile = this.app.vault.getAbstractFileByPath(flashcardFileName);
      if (existingFile instanceof import_obsidian2.TFile) {
        const existingContent = await this.app.vault.read(existingFile);
        const newContent = existingContent + "\n\n## New Flashcards\n\n" + flashcards;
        await this.app.vault.modify(existingFile, newContent);
        await this.app.workspace.getLeaf().openFile(existingFile);
        noticeLoading.hide();
        new import_obsidian2.Notice("Added flashcards to existing note");
      } else {
        const newFile = await this.app.vault.create(flashcardFileName, flashcardContent);
        await this.app.workspace.getLeaf().openFile(newFile);
        noticeLoading.hide();
        new import_obsidian2.Notice("Created new flashcards note");
      }
      const link = `

[[${flashcardFileName.replace(".md", "")}|Flashcards for this note]]
`;
      const cursor = editor.getCursor();
      editor.setLine(cursor.line, editor.getLine(cursor.line) + link);
    } catch (error) {
      noticeLoading.hide();
      new import_obsidian2.Notice(`Error: ${error.message}`);
      console.error("Create Flashcards error:", error);
    }
  }
  async startChatSession(editor) {
    await this.ensureFolderExists(this.settings.chatFolder);
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
    const chatFileName = `${this.settings.chatFolder}/Chat-${timestamp}.md`;
    const chatTemplate = `# Chat Session ${new Date().toLocaleString()}

## Context
*This is a chat session with Synapse AI. Type your messages after the > prompt.*

## Chat

> 

`;
    const newFile = await this.app.vault.create(chatFileName, chatTemplate);
    const leaf = this.app.workspace.getLeaf();
    await leaf.openFile(newFile);
    const newEditor = this.getActiveEditor();
    if (newEditor) {
      const lines = chatTemplate.split("\n");
      const promptLine = lines.findIndex((line) => line === "> ");
      if (promptLine !== -1) {
        newEditor.setCursor({ line: promptLine, ch: 2 });
        newEditor.focus();
      }
    }
    new import_obsidian2.Notice("Started new chat session");
  }
  async sendChatMessage(editor) {
    const content = editor.getValue();
    const lines = content.split("\n");
    const currentLine = editor.getCursor().line;
    let promptLine = currentLine;
    while (promptLine >= 0 && !lines[promptLine].startsWith(">")) {
      promptLine--;
    }
    if (promptLine < 0) {
      new import_obsidian2.Notice("No chat prompt found. Please start message with >");
      return;
    }
    const userMessage = lines[promptLine].substring(2).trim();
    if (!userMessage) {
      new import_obsidian2.Notice("Please type a message first");
      return;
    }
    lines[promptLine] = `> ${userMessage}`;
    lines.splice(promptLine + 1, 0, "\n_Synapse is thinking..._");
    editor.setValue(lines.join("\n"));
    const chatHistory = this.extractChatHistory(lines, promptLine);
    try {
      const systemPrompt = this.processTemplateVariables(this.settings.chatSystemPrompt);
      const response = await this.ollama.generate(userMessage, systemPrompt, chatHistory);
      lines.splice(promptLine + 1, 1);
      lines.splice(
        promptLine + 1,
        0,
        `
${response}
`,
        `> `
      );
      const scrollInfo = editor.getScrollInfo ? editor.getScrollInfo() : null;
      editor.setValue(lines.join("\n"));
      setTimeout(() => {
        const updatedContent = editor.getValue();
        const updatedLines = updatedContent.split("\n");
        let newPromptLine = -1;
        for (let i = promptLine + 1; i < updatedLines.length; i++) {
          if (updatedLines[i] === "> ") {
            newPromptLine = i;
            break;
          }
        }
        if (newPromptLine >= 0) {
          editor.setCursor({ line: newPromptLine, ch: 2 });
          const cmEditor = editor.cm;
          if (cmEditor) {
            if (cmEditor.scrollIntoView) {
              cmEditor.scrollIntoView({
                line: newPromptLine,
                ch: 2
              }, 100);
            }
          } else {
            editor.scrollIntoView({
              from: { line: newPromptLine, ch: 0 },
              to: { line: newPromptLine, ch: 2 }
            }, true);
          }
          const editorElement = document.querySelector(".cm-scroller");
          if (editorElement) {
            editorElement.scrollTop = editorElement.scrollHeight;
          }
          editor.focus();
        }
      }, 100);
    } catch (error) {
      new import_obsidian2.Notice(`Error: ${error.message}`);
      console.error("Chat error:", error);
      lines.splice(promptLine + 1, 1);
      lines.splice(promptLine + 1, 0, "_Error: Could not generate response_");
      editor.setValue(lines.join("\n"));
    }
  }
  async generateLiveSuggestion(editor) {
    if (!this.settings.enableLiveSuggestions)
      return;
    const content = editor.getValue();
    const cursor = editor.getCursor();
    const currentLine = cursor.line;
    const contextLines = content.split("\n").slice(Math.max(0, currentLine - 5), currentLine + 3);
    const context = contextLines.join("\n");
    if (context.trim().length < 3)
      return;
    try {
      const systemPrompt = `You are an AI writing assistant. 
            Based on the context provided, suggest a brief continuation (1-3 words maximum).
            Make your suggestion directly relevant to what's being written.
            Do not repeat what's already written. 
            Only return the continuation text. Do not include any additional text or formatting.`;
      const response = await this.ollama.generate(`Continue this text: ${context}`, systemPrompt);
      this.displayGhostText(editor, response);
    } catch (error) {
      console.error("Suggestion error:", error);
    }
  }
  displayGhostText(editor, text) {
    if (!this.settings.showGhostText)
      return;
    const notice = new import_obsidian2.Notice(`Suggestion: ${text.substring(0, 50)}${text.length > 50 ? "..." : ""}`, 5e3);
    if (this.settings.allowQuickAccept) {
      const noticeEl = notice.noticeEl;
      const buttonContainer = noticeEl.createDiv("synapse-suggestion-actions");
      const acceptButton = buttonContainer.createEl("button", {
        text: "Accept",
        cls: "synapse-accept-button"
      });
      acceptButton.addEventListener("click", () => {
        const cursor = editor.getCursor();
        editor.replaceRange(" " + text, cursor);
        notice.hide();
      });
    }
  }
  // New method to process template variables in prompts
  processTemplateVariables(text) {
    let processed = text;
    processed = processed.replace(/{{maxResponseLength}}/g, this.settings.maxResponseLength.toString());
    processed = processed.replace(/{{model}}/g, this.settings.ollamaModel);
    processed = processed.replace(/{{date}}/g, new Date().toLocaleDateString());
    for (const [key, value] of Object.entries(this.settings.customTemplateVariables)) {
      processed = processed.replace(new RegExp(`{{${key}}}`, "g"), value);
    }
    return processed;
  }
  // New method to generate note content from template
  async generateFromTemplate(templatePath, variables) {
    try {
      const templateFile = this.app.vault.getAbstractFileByPath(templatePath);
      if (!(templateFile instanceof import_obsidian2.TFile)) {
        throw new Error(`Template file not found: ${templatePath}`);
      }
      let templateContent = await this.app.vault.read(templateFile);
      for (const [key, value] of Object.entries(variables)) {
        templateContent = templateContent.replace(new RegExp(`{{${key}}}`, "g"), value);
      }
      return templateContent;
    } catch (error) {
      console.error("Template error:", error);
      throw new Error(`Failed to process template: ${error.message}`);
    }
  }
  sanitizeFileName(text) {
    return text.replace(/[^\w\s-]/g, "").replace(/\s+/g, " ").trim().substring(0, 50);
  }
  async ensureFolderExists(folderPath) {
    if (!folderPath)
      return;
    const folders = folderPath.split("/").filter((p) => p.trim());
    let currentPath = "";
    for (const folder of folders) {
      currentPath = currentPath ? `${currentPath}/${folder}` : folder;
      if (!this.app.vault.getAbstractFileByPath(currentPath)) {
        try {
          await this.app.vault.createFolder(currentPath);
        } catch (error) {
          console.error(`Failed to create folder ${currentPath}:`, error);
        }
      }
    }
  }
  getActiveEditor() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    return (view == null ? void 0 : view.editor) || null;
  }
  extractChatHistory(lines, currentPromptLine) {
    let chatHistory = "";
    let inChat = false;
    for (let i = 0; i < currentPromptLine; i++) {
      const line = lines[i];
      if (line === "## Chat") {
        inChat = true;
        continue;
      }
      if (inChat) {
        if (line.startsWith("> ")) {
          chatHistory += `User: ${line.substring(2)}
`;
        } else if (line.trim() && !line.startsWith("_") && line !== "") {
          chatHistory += `AI: ${line}
`;
        }
      }
    }
    return chatHistory;
  }
};

// src/main.ts
var SynapsePlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.DEFAULT_SETTINGS = DEFAULT_SETTINGS;
  }
  async onload() {
    await this.loadSettings();
    this.ollama = new OllamaClient(this.settings.ollamaUrl, this.settings.ollamaModel);
    this.commands = new SynapseCommands(this.app, this.ollama, this.settings);
    this.debouncedSuggestion = (0, import_obsidian3.debounce)(
      (editor) => this.commands.generateLiveSuggestion(editor),
      this.settings.suggestionDelay
    );
    this.addSettingTab(new SynapseSettingsTab(this.app, this));
    this.addCommand({
      id: "explain-and-link",
      name: "Explain & Link Selected Text",
      editorCallback: (editor) => {
        const selectedText = editor.getSelection();
        this.commands.explainAndLink(editor, selectedText);
      }
    });
    this.addCommand({
      id: "summarize-note",
      name: "Summarize Current Note",
      editorCallback: (editor) => {
        const content = editor.getValue();
        this.commands.summarizeNote(editor, content);
      }
    });
    this.addCommand({
      id: "create-flashcards",
      name: "Create Flashcards from Selection",
      editorCallback: (editor) => {
        const selectedText = editor.getSelection();
        this.commands.createFlashcards(editor, selectedText);
      }
    });
    this.addCommand({
      id: "start-chat",
      name: "Start New Chat Session",
      editorCallback: (editor) => {
        this.commands.startChatSession(editor);
      }
    });
    this.addCommand({
      id: "send-chat-message",
      name: "Send Chat Message",
      editorCallback: (editor) => {
        this.commands.sendChatMessage(editor);
      }
    });
    this.addCommand({
      id: "toggle-live-suggestions",
      name: "Toggle Live Suggestions",
      callback: () => {
        this.settings.enableLiveSuggestions = !this.settings.enableLiveSuggestions;
        this.saveSettings();
        new import_obsidian3.Notice(`Live suggestions ${this.settings.enableLiveSuggestions ? "enabled" : "disabled"}`);
      }
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        var _a;
        const selectedText = editor.getSelection();
        if (selectedText) {
          menu.addItem((item) => {
            item.setTitle("\u{1F9E0} Explain & Link").setIcon("brain-circuit").onClick(async () => {
              await this.commands.explainAndLink(editor, selectedText);
            });
          });
          menu.addItem((item) => {
            item.setTitle("\u{1F3B4} Create Flashcards").setIcon("card-stack").onClick(async () => {
              await this.commands.createFlashcards(editor, selectedText);
            });
          });
        }
        menu.addItem((item) => {
          item.setTitle("\u{1F4DD} Summarize Note").setIcon("list-checks").onClick(async () => {
            const content = editor.getValue();
            await this.commands.summarizeNote(editor, content);
          });
        });
        const fileName = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.basename) || "";
        if (fileName.startsWith("Chat-")) {
          menu.addItem((item) => {
            item.setTitle("\u{1F4AC} Send Chat Message").setIcon("message-square").onClick(async () => {
              await this.commands.sendChatMessage(editor);
            });
          });
        } else {
          menu.addItem((item) => {
            item.setTitle("\u{1F4AC} Start Chat Session").setIcon("message-circle").onClick(async () => {
              await this.commands.startChatSession(editor);
            });
          });
        }
      })
    );
    this.registerLiveSuggestionEvents();
    this.checkOllamaConnection();
    console.log("Synapse plugin loaded");
  }
  onunload() {
    console.log("Synapse plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.commands.updateSettings(this.settings);
    this.debouncedSuggestion = (0, import_obsidian3.debounce)(
      (editor) => this.commands.generateLiveSuggestion(editor),
      this.settings.suggestionDelay
    );
    this.registerLiveSuggestionEvents();
  }
  registerLiveSuggestionEvents() {
    if (this.liveSuggestionEvent) {
      this.app.workspace.off("editor-change", this.liveSuggestionEvent);
    }
    if (this.settings.enableLiveSuggestions) {
      this.liveSuggestionEvent = this.app.workspace.on("editor-change", (editor) => {
        this.debouncedSuggestion(editor);
      });
      this.registerEvent(this.liveSuggestionEvent);
    }
  }
  async checkOllamaConnection() {
    const isAvailable = await this.ollama.isAvailable();
    if (!isAvailable) {
      new import_obsidian3.Notice(
        "Synapse: Cannot connect to Ollama. Please make sure Ollama is running on " + this.settings.ollamaUrl,
        8e3
      );
    } else {
      new import_obsidian3.Notice("Synapse: Connected to Ollama successfully", 3e3);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
